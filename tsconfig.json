{
  "compileOnSave": true,
  "compilerOptions": {
    /* Basic Options */
    // "target": "es6",
    // "module": "commonjs",
    "target": "ES2018",                       /* Specify ECMAScript target version: 'ES3' (default), 'ES5', 'ES2015', 'ES2016', 'ES2017','ES2018' or 'ESNEXT'. */
    "module": "ESNext",                     /* Specify module code generation: 'none', 'commonjs', 'amd', 'system', 'umd', 'es2015', or 'ESNext'. */
    "lib": [
      "ESNext" /* Specify library files to be included in the compilation. */,
      "ES2020",
      "ES2020.bigint",
      "ES2020.string",
      "ES2020.symbol.wellknown",
      "ES2019",
      "ES2018",
      "ES2017",
      "ES2015",
      "ES6",
      "DOM",
      "DOM.iterable"
    ],
    "allowJs": true /* Allow javascript files to be compiled. */,
    // TODO ENABLE
    // "checkJs": true,                       /* Report errors in .js files. */
    "jsx": "preserve" /* Specify JSX code generation: 'preserve', 'react-native', or 'react'. */,
    "declaration": true /* Generates corresponding '.d.ts' file. */,
    // "declarationMap": true,                /* Generates a sourcemap for each corresponding '.d.ts' file. */
    "sourceMap": true /* Generates corresponding '.map' file. */,
    // "outFile": "./dist/index.d.ts",        /* Concatenate and emit output to single file. */
    "outDir": "./dist" /* Redirect output structure to the directory. */,
    "rootDir": "." /* Specify the root directory of input files. Use to control the output directory structure with --outDir. */,
    // "composite": true,                     /* Enable project compilation */
    "removeComments": true /* Do not emit comments to output. */,
    "noEmit": true /* Do not emit outputs. */,
    "importHelpers": true /* Import emit helpers from 'tslib' found at https://github.com/Microsoft/tslib */,
    "downlevelIteration": true /* Provide full support for iterables in 'for-of', spread, and destructuring when targeting 'ES5' or 'ES3'. */,
    "isolatedModules": true /* Transpile each file as a separate module (similar to 'ts.transpileModule'). */,

    /* Strict Type-Checking Options */
    "strict": true /* Enable all strict type-checking options. */,
    "noImplicitAny": true /* Raise error on expressions and declarations with an implied 'any' type. */,
    "strictNullChecks": false /* Enable strict null checks. */,
    // "strictFunctionTypes": true,           /* Enable strict checking of function types. */
    // "strictPropertyInitialization": true,  /* Enable strict checking of property initialization in classes. */
    "noImplicitThis": true /* Raise error on 'this' expressions with an implied 'any' type. */,
    // "alwaysStrict": true,                  /* Parse in strict mode and emit "use strict" for each source file. */

    /* Additional Checks */
    // TODO ADD after working
    // "noUnusedLocals": true,                /* Report errors on unused locals. */
    "noUnusedParameters": true /* Report errors on unused parameters. */,
    "noImplicitReturns": true /* Report error when not all code paths in function return a value. */,
    "noFallthroughCasesInSwitch": true /* Report errors for fallthrough cases in switch statement. */,

    /* Module Resolution Options */
    "moduleResolution": "node" /* Specify module resolution strategy: 'node' (Node.js) or 'classic' (TypeScript pre-1.6). */,
    "baseUrl": "./" /* Base directory to resolve non-absolute module names. */,
    "paths": {
      /* A series of entries which re-map imports to lookup locations relative to the 'baseUrl'. */
      "@/*": ["./src/*"],
      "*": [
        /* https://www.typescriptlang.org/docs/handbook/module-resolution.html */
        "./node_modules/*",
        "./src/types/*",
      ]
    },
    "rootDirs": [
      "."
    ] /* List of root folders whose combined content represents the structure of the project at runtime. */,
    "allowSyntheticDefaultImports": true /* Allow default imports from modules with no default export. This does not affect code emit, just typechecking. */,
    "esModuleInterop": true /* Enables emit interoperability between CommonJS and ES Modules via creation of namespace objects for all imports. Implies 'allowSyntheticDefaultImports'. */,
    "preserveSymlinks": true /* Do not resolve the real path of symlinks. */,

    /* Source Map Options */
    // "sourceRoot": "./",                    /* Specify the location where debugger should locate TypeScript files instead of source locations. */
    // "mapRoot": "./",                       /* Specify the location where debugger should locate map files instead of generated locations. */
    // "inlineSourceMap": true,               /* Emit a single file with source maps instead of having a separate file. */
    "inlineSources": true /* Emit the source alongside the sourcemaps within a single file; requires '--inlineSourceMap' or '--sourceMap' to be set. */,

    /* Experimental Options */
    "emitDecoratorMetadata": true /* Enables experimental support for emitting type metadata for decorators. */,
    "experimentalDecorators": true /* Enables experimental support for ES7 decorators. */,

    /* Advanced Options */
    "allowUmdGlobalAccess": true /* Allow accessing UMD globals from modules. */,
    "declarationDir": "lib" /* Output directory for generated declaration files. */,
    "forceConsistentCasingInFileNames": true /* Disallow inconsistently-cased references to the same file. */,
    "importsNotUsedAsValues": "preserve" /* ForkTsCheckerWebpackPlugin since it is a limitation of the transpileOnly mode from ts-loader */,
    "preserveConstEnums": true /* Do not erase const enum declarations in generated code. See const enums documentation for more details. */,
    "pretty": true /* Stylize errors and messages using color and context. */,
    "resolveJsonModule": true /* Include modules imported with .json extension. */,
    "skipLibCheck": false /* Skip type checking of all declaration files (*.d.ts). */,
    "suppressImplicitAnyIndexErrors": true /* Suppress --noImplicitAny errors for indexing objects lacking index signatures. See issue #1232 for more details. */,
    "watch": true /* Run the compiler in watch mode. Watch input files and trigger recompilation on changes. */
  },
  "typeRoots": [
    /* List of folders to include type definitions from. */ "node_modules/@types",
    "node_modules/mxgraph-type-definitions"
  ],
  // "types" : [
  //   "@types/node",
  //   "mxgraph-type-definitions"
  // ],
  "files": [
    "./src/main.ts",
    "./src/types/shims-vue.d.ts",
    "./src/types/shims-vue-resize-directive.d.ts",
    "./src/types/shims-vue-clamp.d.ts",
    "./src/types/shims-vue-codemirror.d.ts",
    // "node_modules/mxgraph-type-definitions/model/mxCell.d.ts",
    // "./node_modules/mxgraph-type-definitions/index.d.ts", // src/types/shims-mxgraph-type-definitions.d.ts",
  ],
  "include": [
    // https://github.com/microsoft/TypeScript/wiki/Performance
    "./*.json",
    "./*.js",
    "./.eslintrc.js",
    "./tsconfig.json",
    "./config/**/*.ts",
    "./config/**/*.js",
    "./src/**/*.vue",
    "./src/**/*.ts",
    "./src/**/*.tsx",
    "./src/**/*.js"
  ],
  "exclude": ["**/node_modules"],
  "watchOptions": {
    // Use native file system events for files and directories
    "watchFile": "useFsEvents",
    "watchDirectory": "useFsEvents",
    // Poll files for updates more frequently
    // when they're updated a lot.
    "fallbackPolling": "dynamicPriority",
    // https://github.com/microsoft/TypeScript/pull/35615/files/600bc04667b4bffc119368c8f10ac64f45ec1682#diff-4b8bd1eea29904f1be39cd864e1a45c0R5070
    "synchronousWatchDirectory": false
  }
}
